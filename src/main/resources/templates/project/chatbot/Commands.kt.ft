package ${GROUP_ID}.${ARTIFACT_ID}

import space.jetbrains.api.runtime.helpers.message
import space.jetbrains.api.runtime.types.ChatMessage
import space.jetbrains.api.runtime.types.CommandDetail
import space.jetbrains.api.runtime.types.Commands
import space.jetbrains.api.runtime.types.MessagePayload

/**
 * Class for containing command details and action.
 */
data class Command(
    val name: String,
    val info: String,
    val action: suspend (payload: MessagePayload) -> Unit
) {

    /**
     * Part of the protocol - returns info about a command to the chat
     */
    fun toCommand() = CommandDetail(name, info)
}

/**
 * Some kind of utility class for controlling available commands
 */
object Commands {

    val help = Command(
        "help",
        "Show this help",
    ) { payload ->
        val context = HelpContext.from(payload)

        val message = message { section { text("Help message:") } }

        printToChat(context, message)
    }

    val echo = Command(
        "echo",
        "Echoing the input string",
    ) { payload ->
        val context = EchoContext.from(payload)

        val body = context.message.body

        val message = if (body is ChatMessage.Text) {
            message { section { text(body.text) } }
        } else {
            message { section { text("Skip the Block body") } }
        }

        printToChat(context, message)
    }

    val list = listOf(help, echo)

    val commands: Commands
        get() = Commands(list.map { it.toCommand() })
}