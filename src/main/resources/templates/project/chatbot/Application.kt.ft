package ${GRADLE_GROUP_ID}.${GRADLE_ARTIFACT_ID}

import io.ktor.application.*
import io.ktor.response.*
import io.ktor.request.*
import io.ktor.client.*
import io.ktor.client.engine.cio.*
import io.ktor.http.*
import io.ktor.routing.*
import space.jetbrains.api.runtime.types.ListCommandsPayload
import space.jetbrains.api.runtime.types.MessagePayload
import space.jetbrains.yana.readPayload

fun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)

@Suppress("unused") // Referenced in application.conf
@kotlin.jvm.JvmOverloads
fun Application.module(testing: Boolean = false) {
    install(Routing){
        backToSpace()
    }
}

fun Routing.backToSpace() {
    post("api/back-to-space") {
        // read payload and verify Space instance
        val payload = readPayload(call.receiveText())
        if (!verifyPayload(payload)) {
            return@post call.respond(HttpStatusCode.Unauthorized)
        }

        val context = getCallContext(payload)
        // analyze the message payload
        // MessagePayload = user sends a command
        // ListCommandsPayload = user types a slash or a char
         when (payload) {
            is MessagePayload -> {
                commandHelp(context)
                call.respond(HttpStatusCode.OK, "")
            }

            is ListCommandsPayload -> {
                println("ListCommandsPayload")
            }
        }
    }
}
