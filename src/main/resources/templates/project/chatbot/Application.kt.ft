package ${GROUP_ID}.${ARTIFACT_ID}

import io.ktor.application.*
import io.ktor.client.*
import io.ktor.client.engine.cio.*
import io.ktor.http.*
import io.ktor.request.*
import io.ktor.response.*
import io.ktor.routing.*
import io.ktor.util.pipeline.*
import org.slf4j.LoggerFactory
import space.jetbrains.api.runtime.types.ApplicationPayload
import space.jetbrains.api.runtime.types.ListCommandsPayload
import space.jetbrains.api.runtime.types.MessageActionPayload
import space.jetbrains.api.runtime.types.MessagePayload
import space.jetbrains.yana.readPayload

fun main(args: Array<String>): Unit = io.ktor.server.cio.EngineMain.main(args)

@Suppress("unused") // Referenced in application.conf
@kotlin.jvm.JvmOverloads
fun Application.module(testing: Boolean = false) {
    install(Routing) {
        chatbot()
    }
}

fun Routing.chatbot() {
    post("api/chatbot") {
        // read payload and verify Space instance
        val payload = readPayload(call.receiveText())
        if (!Endpoint.verify(payload)) {
            return@post call.respond(HttpStatusCode.Unauthorized)
        }

        try {
            processChatbotPayload(payload)
        } catch (unknownCommand: IllegalStateException) {
            LoggerFactory.getLogger("Chatbot").error(unknownCommand.message)
        }
    }
}

private suspend fun PipelineContext<Unit, ApplicationCall>.processChatbotPayload(payload: ApplicationPayload) {
    val context = getEchoContext(payload)

    when (payload) {
        // MessagePayload = user sends a message
        is MessagePayload -> {
            commandEcho(context)
            call.respond(HttpStatusCode.OK, "")
        }
        // MessageActionPayload = ...
        is MessageActionPayload -> {
            println("MessageActionPayload. Do nothing")
        }
        // ListCommandsPayload = user types a slash or a char
        is ListCommandsPayload -> {
            println("ListCommandsPayload. Do nothing")
        }
    }
}